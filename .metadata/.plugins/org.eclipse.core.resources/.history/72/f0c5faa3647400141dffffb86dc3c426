import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class ScalePanel extends JPanel implements MouseListener,
		ActionListener, MouseMotionListener, TermListener, SolveForXListener {

	public static boolean solveX;

	public static JTextField xVal;
	private JTextField xValLabel;
	private JButton update;

	private ArrayList<Term> leftTerms, rightTerms;
	private Term floatingTerm;
	private int W = 800, H = 600;
	public static int angle;
	public static Point center;
	private Rectangle bar;
	private Image trashImage;
	private int trashX = 50, trashY = 450, trashW = 100;
	private Color background = new Color(20, 20, 40);

	public ScalePanel() {
		setLayout(null);
		setPreferredSize(new Dimension(W, H));
		setBackground(background);

		leftTerms = new ArrayList<Term>();
		rightTerms = new ArrayList<Term>();

		bar = new Rectangle(600, 20);
		center = new Point(W / 2, H / 2);

		update = new JButton("Update");
		update.setBounds(5, 10, 90, 20);
		update.addActionListener(this);
		xValLabel = new JTextField("X = ");
		xValLabel.setEditable(false);
		xValLabel.setBounds(100, 10, 30, 20);
		xValLabel.setBackground(Color.white);
		xVal = new JTextField("0", 4);
		xVal.setBounds(130, 10, 80, 20);

		trashImage = new ImageIcon("resources/trash.png").getImage();

		addMouseListener(this);
		addMouseMotionListener(this);

		add(update);
		add(xVal);
		add(xValLabel);
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;

		// BAR
		bar.setBounds(center.x - bar.width / 2, center.y - bar.height / 2, 600,
				20);
		g2.setColor(Color.white);
		g2.fill(rotate(bar));

		// CENTER CIRCLE
		g2.setColor(background);
		g2.fillOval(center.x - 5, center.y - 5, 10, 10);

		// TRASH SQUARE & TEXT
		g2.drawImage(trashImage, trashX, trashY, trashW, trashW, null);

		// TRUE or FALSE indicator
		g2.setColor(Color.WHITE);
		g2.setFont(new Font("Sanserif", Font.PLAIN, 50));

		if (matchesInequality()) {
			g2.drawString("Correct!", W / 2 - 100, H - 100);
		} else {
			g2.drawString("Not Quite!", W / 2 - 100, H - 100);
		}
	}

	public boolean matchesInequality() {
		if (MenuBar.exampleOutput.getText().contains(">")) {
			if (MenuBar.exampleOutput.getText().contains("=")) {
				return angle < 0 || angle == 0;
			} else {
				return angle < 0;
			}
		} else if (MenuBar.exampleOutput.getText().contains("<")) {
			if (MenuBar.exampleOutput.getText().contains("=")) {
				return angle > 0 || angle == 0;
			} else {
				return angle > 0;
			}
		} else {
			return angle == 0;
		}
	}

	public Shape rotate(Rectangle r) {
		AffineTransform transform = new AffineTransform();
		transform.rotate(Math.toRadians(angle), center.getX(), center.getY());
		return transform.createTransformedShape(r);
	}

	@Override
	public void addX() {
		floatingTerm = new XTerm(this);
		floatingTerm.coefficientField.setEditable(false);
		add(floatingTerm);
	}

	@Override
	public void addConstant() {
		floatingTerm = new Constant(this);
		floatingTerm.coefficientField.setEditable(false);
		add(floatingTerm);
	}

	@Override
	public void mouseDragged(MouseEvent me) {
	}

	@Override
	public void mouseMoved(MouseEvent me) {
		if (floatingTerm != null) {
			floatingTerm
					.setBounds(me.getX() + 5, me.getY() + 5, Term.W, Term.W);
		}
		update();
	}

	@Override
	public void mouseClicked(MouseEvent me) {
		int mX = me.getX() + Term.W / 2;
		int mY = me.getY() + Term.W / 2;
		if (floatingTerm != null) {
			if (!overTrash(mX, mY)) {
				if (inValidDroppingPosition(mX, mY)) {
					Term t = floatingTerm.cloneMe(mX, center.y - Term.W);
					t.setSize(Term.W, Term.W);

					add(t);

					if (me.getX() < W / 2) {
						leftTerms.add(t);
					} else {
						rightTerms.add(t);
					}
					remove(floatingTerm);
					floatingTerm = null;
					update();
					revalidate();
					repaint();
				}
			} else {
				remove(floatingTerm);
				floatingTerm = null;
				revalidate();
				repaint();
			}
		}
		update();
		revalidate();
		repaint();
	}

	@Override
	public void mouseEntered(MouseEvent me) {
	}

	@Override
	public void mouseExited(MouseEvent me) {
	}

	@Override
	public void mousePressed(MouseEvent me) {
	}

	@Override
	public void mouseReleased(MouseEvent me) {
	}

	public void update() {
		
		for (int i=0;i<rightTerms.size();i++){
			Term t = rightTerms.get(i);
			System.out.println(t.getX());
		} 
		
		
		try {
			if (xVal.getText().contains("/")) {
				String[] parts = xVal.getText().split("/");
				double num = Integer.parseInt(parts[0]);
				double denom = Integer.parseInt(parts[1]);
				System.out.println("weight is " + num / denom);
				XTerm.weight = num / denom;
			} else if (xVal.getText().equals("")) {
				XTerm.weight = 0;
			} else {
				XTerm.weight = Double.parseDouble(xVal.getText());
			}
			xVal.setText(XTerm.weight + "");
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Fix your X input");
		}
		int leftWeight = updateLeftWeights();
		int rightWeight = updateRightWeights();

		if (leftWeight > rightWeight) {
			angle = -25;
		} else if (leftWeight < rightWeight) {
			angle = 25;
		} else {
			angle = 0;
		}

		for (Term t : leftTerms) {
			if (angle == -25) {
				t.setTiltedDown();
			} else if (angle == 25) {
				t.setTiltedUp();
			} else {
				t.layFlat();
			}
		}
		for (Term t : rightTerms) {
			if (angle == -25) {
				t.setTiltedDown();
			} else if (angle == 25) {
				t.setTiltedUp();
			} else {
				t.layFlat();
			}
		}
		revalidate();
		repaint();
	}

	public boolean inValidDroppingPosition(int x, int y) {
		return x < bar.getWidth() - Term.W + bar.getX()
				&& x > bar.getX() + Term.W / 2 && y < bar.getY() - Term.W;
	}

	public boolean overTrash(int x, int y) {
		return x > trashX && x < trashX + trashW && y > trashY
				&& y < trashY + trashW;
	}

	@Override
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == update) {
			update();
		}
	}

	@Override
	public void removeTerm(Term t) {
		this.remove(t);
		if (leftTerms.contains(t)) {
			leftTerms.remove(t);
		} else {
			rightTerms.remove(t);
		}
		update();
	}

	@Override
	public void solve() {
		double A = 0, B = 0, C = 0, D = 0;
		updateRightWeights();
		updateLeftWeights();
		for (Term t : leftTerms) {
			if (t instanceof XTerm) {
				A += ((XTerm) t).coefficient;
			} else if (t instanceof Constant) {
				C += t.weight;
			}
		}

		for (Term t : rightTerms) {
			if (t instanceof XTerm) {
				B += ((XTerm) t).coefficient;
			} else if (t instanceof Constant) {
				D += t.weight;
			}
		}
		try {
			double x = (D - C) / (A - B);
			xVal.setText(x + "");
		} catch (ArithmeticException ae) {

			JOptionPane.showMessageDialog(this, "Sorry! I can't solve that!");
			xVal.setText("0");
		}
		update();
	}

	public int updateLeftWeights() {
		int w = 0;
		for (Term t : leftTerms) {
			w += t.updateWeight();
		}
		return w;
	}

	public int updateRightWeights() {
		int w = 0;
		for (Term t : rightTerms) {
			w += t.updateWeight();
		}
		return w;
	}
}
