import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class ScalePanel extends JPanel implements MouseListener,
		ActionListener, MouseMotionListener, RemoveTermListener,
		AddTermListener, SolveForXListener {

	public static boolean solveX;

	public static JTextField xVal;
	private JTextField xValLabel;
	private JButton update;

	private ArrayList<Term> leftTerms, rightTerms;
	private Term floatingTerm;
	private int W = 800, H = 600;
	public static int angle;
	public static Point center;
	private Rectangle bar;
	private Rectangle trash;

	public ScalePanel() {
		setLayout(null);
		setPreferredSize(new Dimension(W, H));
		setBackground(new Color(20, 20, 140));

		leftTerms = new ArrayList<Term>();
		rightTerms = new ArrayList<Term>();

		bar = new Rectangle(600, 20);
		center = new Point(W / 2, H / 2);
		trash = new Rectangle();
		trash.setBounds(650, 30, 120, 120);

		update = new JButton("Update");
		update.setBounds(5, 10, 90, 20);
		update.addActionListener(this);
		xValLabel = new JTextField("X = ");
		xValLabel.setEditable(false);
		xValLabel.setBounds(100, 10, 30, 20);
		xValLabel.setBackground(Color.white);
		xVal = new JTextField("0", 4);
		xVal.setBounds(130, 10, 80, 20);

		addMouseListener(this);
		addMouseMotionListener(this);

		add(update);
		add(xVal);
		add(xValLabel);
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;

		// BAR
		bar.setBounds(center.x - bar.width / 2, center.y - bar.height / 2, 600,
				20);
		g2.fill(rotate(bar));

		// CENTER CIRCLE
		g2.setColor(Color.red);
		g2.fillOval(center.x - 5, center.y - 5, 10, 10);

		// TRASH SQUARE & TEXT
		g2.fill(trash);
		g2.setColor(Color.black);
		g2.drawString("Discard", 685, 20);

		// TRUE or FALSE indicator
		g2.drawString("", W / 2 - 40, H - 100);
	}

	public Shape rotate(Rectangle r) {
		AffineTransform transform = new AffineTransform();
		transform.rotate(Math.toRadians(angle), center.getX(), center.getY());
		return transform.createTransformedShape(r);
	}

	@Override
	public void addX() {
		floatingTerm = new XBin(this);
		floatingTerm.edit.setEditable(false);
		add(floatingTerm);
	}

	@Override
	public void addConstant() {
		floatingTerm = new Constant(this);
		floatingTerm.edit.setEditable(false);
		add(floatingTerm);
	}

	@Override
	public void mouseDragged(MouseEvent me) {

	}

	@Override
	public void mouseMoved(MouseEvent me) {
		if (floatingTerm != null) {
			floatingTerm
					.setBounds(me.getX() + 5, me.getY() + 5, Term.W, Term.W);
		}
		repaint();
	}

	@Override
	public void mouseClicked(MouseEvent me) {
		if (floatingTerm != null) {
			if (!overTrash(me.getX(), me.getY())) {
				if (inValidDroppingPosition(me.getX(), me.getY())) {
					Term t = floatingTerm.cloneMe(me.getX(), center.y - Term.W);
					t.setSize(Term.W, Term.W);

					add(t);

					if (me.getX() < W / 2) {
						leftTerms.add(t);
					} else {
						rightTerms.add(t);
					}
					remove(floatingTerm);
					floatingTerm = null;
					update();
					revalidate();
					repaint();
				}
			} else {
				remove(floatingTerm);
				floatingTerm = null;
				revalidate();
				repaint();
			}
		}
		update();
		revalidate();
		repaint();
	}

	@Override
	public void mouseEntered(MouseEvent me) {
	}

	@Override
	public void mouseExited(MouseEvent me) {
	}

	@Override
	public void mousePressed(MouseEvent me) {
	}

	@Override
	public void mouseReleased(MouseEvent me) {
	}

	public void update() {

		try {
			XBin.weight = Integer.parseInt(xVal.getText());
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Fix your X input");
		}
		int leftWeight = updateLeftWeights();
		int rightWeight = updateRightWeights();

		if (leftWeight > rightWeight) {
			angle = -25;
		} else if (leftWeight < rightWeight) {
			angle = 25;
		} else {
			angle = 0;
		}

		for (Term t : leftTerms) {
			if (angle == -25) {
				t.tiltDown();
			} else if (angle == 25) {
				t.tiltUp();
			} else {
				t.layFlat();
			}
		}
		for (Term t : rightTerms) {
			if (angle == -25) {
				t.tiltDown();
			} else if (angle == 25) {
				t.tiltUp();
			} else {
				t.layFlat();
			}
		}
		revalidate();
		repaint();
	}

	public boolean inValidDroppingPosition(int x, int y) {
		return x < bar.getWidth() + bar.getX() && y < bar.getY();
	}

	public boolean overTrash(int x, int y) {
		return trash.contains(x, y);
	}

	@Override
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == update) {
			update();
		}
	}

	@Override
	public void removeTerm(Term t) {
		this.remove(t);
		if (leftTerms.contains(t)) {
			leftTerms.remove(t);
		} else {
			rightTerms.remove(t);
		}
		update();
	}

	@Override
	public void solve() {
		int A = 0, B = 0, C = 0, D = 0;
		updateRightWeights();
		updateLeftWeights();
		for (Term t : leftTerms) {
			if (t instanceof XBin) {
				A += ((XBin) t).coefficient;
			} else if (t instanceof Constant) {
				C += t.weight;
			}
		}

		for (Term t : rightTerms) {
			if (t instanceof XBin) {
				B += ((XBin) t).coefficient;
			} else if (t instanceof Constant) {
				D += t.weight;
			}
		}
		try {
			int x = (int) ((D - C) / (A - B));
			xVal.setText(x + "");
		} catch (ArithmeticException ae) {

			JOptionPane
					.showMessageDialog(this,
							"You need to havea term on each side before auto-solving for X!");
			xVal.setText("0");
		}
		update();
	}

	public int updateLeftWeights() {
		int w = 0;
		for (Term t : leftTerms) {
			w += t.updateWeight();
		}
		return w;
	}

	public int updateRightWeights() {
		int w = 0;
		for (Term t : rightTerms) {
			w += t.updateWeight();
		}
		return w;
	}
}
